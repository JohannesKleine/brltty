#!/bin/bash
. brltty-prologue.bash
includeProgramComponent weather
shopt -s extglob

curlLocation=""
curlOptions=()

curlNewRequest() {
   local server="${1}"

   curlLocation="https://${server}"
   curlOptions=(--silent --show-error --get)
}

curlExtendLocation() {
   local component
   for component in "${@}"
   do
      curlLocation+="/${component}"
   done
}

curlAddQueryParameter() {
   local name="${1}"
   local value="${2}"

   curlOptions+=(--data-urlencode "${name}=${value}")
}

curlAddQueryParameters() {
   local parametersArray="${1}"

   forElements "${parametersArray}" curlAddQueryParameter
}

curlGetResponse() {
   local responseVariable="${1}"

   local -n curlResponse="${responseVariable}"
   curlResponse="$(curl "${curlOptions[@]}" -- "${curlLocation}")" || exit 9
}

jsonExtension="json"
addProgramOption J flag saveJSON "save the JSON responses (extension is .${jsonExtension})"

fieldsExtension="txt"
addProgramOption F flag saveFields "save the filtered fields (extension is .${fieldsExtension})"

jsonFilterFields() {
   local resultArray="${1}"
   local json="${2}"
   local jqFilter="${3}"
   "${saveJSON}" && jq . <<<"${json}" >"${programName}.${jqFilter}.${jsonExtension}"

   local jqPath
   findProgramComponent jqPath "${jqFilter}" jq || {
      semanticError "JSON filter not found: ${jqFilter}"
   }

   local jqOptions=(--from-file "${jqPath}")
   jqOptions+=(--raw-output)

   local jqResponse
   jqResponse="$(jq "${jqOptions[@]}" <<<"${json}")" || exit 8

   local name value
   while read name value
   do
      [ "${value}" = "null" ] && value=""
      setElement "${resultArray}" "${name}" "${value}"
   done <<<"${jqResponse}"

   "${saveFields}" && writeElements "${resultArray}" >"${programName}.${jqFilter}.${fieldsExtension}"
   return 0
}

jsonGetField() {
   local resultVariable="${1}"
   local json="${2}"
   local jqField="${3}"

   local -n jqResult="${resultVariable}"
   jqResult="$(jq -r "${jqField}?" <<<"${json}")" || exit 8
   [ "${jqResult}" = "null" ] && jqResult=""
}

ipGetMyAddress() {
   local addressVariable="${1}"

   curlNewRequest "api64.ipify.org"
   curlAddQueryParameter "format" "json"

   local response
   curlGetResponse response

   local -A results=()
   jsonFilterFields results "${response}" my-address

   setVariable "${addressVariable}" "${results["ip,address"]}"
   logNote "IP address: ${!addressVariable}"
}

ipGetProperties() {
   local propertiesArray="${1}"
   local address="${2}"
   [ -n "${adress}" ] || ipGetMyAddress address

   curlNewRequest "ipapi.co"
   curlExtendLocation "${address}" "json"

   local response
   curlGetResponse response
   jsonFilterFields "${propertiesArray}" "${response}" address-properties
}

readonly owmDistanceUnit="m"
readonly owmPressureUnit="hpa"
readonly owmSpeedUnit="m/s"
readonly owmTemperatureUnit="C"

addProgramOption o string.key owmKeyValue "the application key for Open Weather Map" "the first line in the key file"
addProgramOption O string.file owmKeyFile "the file containing the application key"

owmSetKey() {
   local parametersArray="${1}"

   [ -n "${owmKeyValue}" ] || {
      if [ -n "${owmKeyFile}" ]
      then
         verifyInputFile "${owmKeyFile}"
      elif ! findProgramConfigurationFile owmKeyFile "key"
      then
         semanticError "no API key file"
      fi

      read <"${owmKeyFile}" owmKeyValue
   }

   [ -n "${owmKeyValue}" ] || semanticError "API key not specified"
   setElement "${parametersArray}" "appid" "${owmKeyValue}"
}

owmQuery() {
   local resultArray="${1}"
   local parametersArray="${2}"
   shift 2

   local -A owmParameters=()
   getElements owmParameters "${parametersArray}"
   owmSetKey owmParameters

   curlNewRequest "api.OpenWeatherMap.org"
   curlExtendLocation "${@}"
   curlAddQueryParameters owmParameters

   local owmResponse
   curlGetResponse owmResponse

   local owmMessage
   jsonGetField owmMessage "${owmResponse}" ".message"
   [ "${owmMessage}" = "0" ] && owmMessage=""
   [ -n "${owmMessage}" ] && semanticError "${owmMessage}"

   jsonFilterFields "${resultArray}" "${owmResponse}" "${1}-${3}"
}

owmQueryCoordinates() {
   local locationsArray="${1}"
   local latitude="${2}"
   local longitude="${3}"

   local -A parameters=(
      ["lat"]="${latitude}"
      ["lon"]="${longitude}"
      ["limit"]="5"
   )

   owmQuery "${locationsArray}" parameters geo 1.0 reverse
}

owmQueryLocation() {
   local locationsArray="${1}"
   local descriptor="${2}"

   local -A parameters=(
      ["q"]="${descriptor}"
      ["limit"]="5"
   )

   owmQuery "${locationsArray}" parameters geo 1.0 direct
}

owmQueryForecast() {
   local forecastArray="${1}"
   local latitude="${2}"
   local longitude="${3}"

   local -A parameters=(
      ["lat"]="${latitude}"
      ["lon"]="${longitude}"
      ["units"]="metric"
   )

   owmQuery "${forecastArray}" parameters data 2.5 forecast
}

owmQueryWeather() {
   local WeatherArray="${1}"
   local latitude="${2}"
   local longitude="${3}"

   local -A parameters=(
      ["lat"]="${latitude}"
      ["lon"]="${longitude}"
      ["units"]="metric"
   )

   owmQuery "${WeatherArray}" parameters data 2.5 weather
}

addProgramOption u string.type unitsType "the type of units to default to (${unitsTypeNames[*]})"
addProgramOption D string.unit distanceUnit "the unit to display visibility distance in (${!distanceUnits[*]})" "${owmDistanceUnit}"
addProgramOption P string.unit pressureUnit "the unit to display atmospheric pressure in (${!pressureUnits[*]})" "${owmPressureUnit}"
addProgramOption S string.unit speedUnit "the unit to display wind speed in (${!speedUnits[*]})" "${owmSpeedUnit}"
addProgramOption T string.unit temperatureUnit "the unit to display temperaturse in (${!temperatureUnits[*]})" "${owmTemperatureUnit}"

readonly defaultTimeFormat="24-hours"
addProgramOption H string.mode timeFormat "the mode to display time in (${!timeFormats[*]})" "${defaultTimeFormat}"

declare -A unitVariables=(
   ["${distanceUnitSetting}"]="distanceUnit"
   ["${pressureUnitSetting}"]="pressureUnit"
   ["${speedUnitSetting}"]="speedUnit"
   ["${temperatureUnitSetting}"]="temperatureUnit"
   ["${timeFormatSetting}"]="timeFormat"
)

forUnitVariables() {
   forElements unitVariables "${@}"
}

saveUnit() {
   local setting="${1}"
   local variable="${2}"

   changePersistentProgramSetting "${setting}" "${!variable}"
}

saveUnits() {
   forUnitVariables saveUnit
}

setUnit() {
   local setting="${1}"
   local unit="${2}"

   local variable="${unitVariables["${setting}"]}"
   setVariable "${variable}" "${unit}"
}

useUnits() {
   local type="${1}"

   verifyChoice "units type" type "${unitsTypeNames[@]}"
   forElements "${type}Units" setUnit
}

getSetting() {
   local -n value="${1}"
   local default="${2}"
   local setting="${3}"

   [ -n "${value}" ] || {
      getPersistentProgramSetting value "${setting}"

      [ -n "${value}" ] || {
         getMyProperties
         local country="${myProperties["location,country,code"]}"
         local unitsType

         if [ "${country}" = "US" ]
         then
            unitsType=imperial
         else
            unitsType=metric
         fi

         local unitsArray="${unitsType}Units"
         getElement value "${unitsArray}" "${setting}"
         [ -n "${value}" ] || value="${default}"
      }
   }
}

verifyDistanceUnit() {
   getSetting distanceUnit "${owmDistanceUnit}" "${distanceUnitSetting}"
   verifyChoice "distance unit" distanceUnit "${!distanceUnits[@]}"
}

verifyPressureUnit() {
   getSetting pressureUnit "${owmPressureUnit}" "${pressureUnitSetting}"
   verifyChoice "pressure unit" pressureUnit "${!pressureUnits[@]}"
}

verifySpeedUnit() {
   getSetting speedUnit "${owmSpeedUnit}" "${speedUnitSetting}"
   verifyChoice "speed unit" speedUnit "${!speedUnits[@]}"
}

verifyTemperatureUnit() {
   getSetting temperatureUnit "${owmTemperatureUnit}" "${temperatureUnitSetting}"
   verifyChoice "temperature unit" temperatureUnit "${!temperatureUnits[@]}"
}

verifyTimeFormat() {
   getSetting timeFormat "${defaultTimeFormat}" "${timeFormatSetting}"
   verifyChoice "time format" timeFormat "${!timeFormats[@]}"
}

formatDistance() {
   local variable="${1}"
   local precision="${2}"

   local value unit="${distanceUnit}"
   convertSimpleUnit value "${!variable}" "${owmDistanceUnit}" "${unit}" "${precision:-1}"

   [ "${value}" = "0" ] && {
      [ -n "${precision}" ] || {
         case "${unit}"
         in
            k*) unit="${unit#?}";;
            mi) unit="ft";;
         esac

         [ "${unit}" = "${distanceUnit}" ] || {
            convertSimpleUnit value "${!variable}" "${owmDistanceUnit}" "${unit}" "${precision}"
         }
      }
   }

   setVariable "${variable}" "${value}${unit}"
}

formatPressure() {
   local variable="${1}"
   local precision="${2}"

   formatSimpleUnit "${variable}" "${owmPressureUnit}" "${pressureUnit}" "${precision:-1}"
}

formatSpeed() {
   local variable="${1}"
   local precision="${2}"

   formatSimpleUnit "${variable}" "${owmSpeedUnit}" "${speedUnit}" "${precision}"
}

formatTemperature() {
   local variable="${1}"
   local precision="${2}"

   formatComplexUnit "${variable}" "${owmTemperatureUnit}" "${temperatureUnit}" temp "${precision}"
}

formatTime() {
   local variable="${1}"

   local text
   printf -v text "%(${timeFormats["${timeFormat}"]}, %A, %B %e)T" "${!variable}"
   text="${text//+( )/ }"

   setVariable "${variable}" "${text# }"
}

showProgramUsageNotes() {
cat <<END_OF_PROGRAM_USAGE_NOTES

Queries (may be abbreviated):
  location [descriptor]
  coordinates [latitude longitude]
  forecast [latitude longitude]
  weather [latitude longitude]

The location to use is selected as follows:
1: The coordinate parameters (if specified).
2: The location descriptor (if specified via the -l option).
3: The location setting (if saved).
4: The current location (estimated via the IP address).

Location Descriptors:
  A location descriptor is specified as name[[,state],country].
  The name is required, must be first, and may be abbreviated.
  The optional two-letter ISO 3166 country code must be last.
  The optional two-letter state code only applies to the US.
  The special value = means the (estimated) current location.

Latitudes and Longitudes
  A latitude or longitude is specified as a number either between -90 and +90
  (for latitudes) or between -180 and +180 (for longitudes). The sign is optional.
  The number may contain a decimal point followed by one or more digits.
  Positive numbers refer to north latitudes and east longitudes.
  Negative numbers refer to south latitudes and west longitudes.
  A letter - ${positiveLatitudeLetter} or ${negativeLatitudeLetter} for latitudes, ${positiveLongitudeLetter} or ${negativeLongitudeLetter} for longitudes - may be appended.
END_OF_PROGRAM_USAGE_NOTES
}

declare -a queryArguments=()

processExtraProgramParameters() {
   queryArguments=("${@}")
}

haveMoreQueryArguments() {
   [ "${#queryArguments[*]}" -gt 0 ] || return 1
   return 0
}

noMoreQueryArguments() {
   haveMoreQueryArguments && syntaxError "too many ${queryType} arguments"
}

getQueryArgument() {
   local resultVariable="${1}"
   local label="${2}"

   set -- "${queryArguments[@]}"
   [ "${#}" -gt 0 ] || syntaxError "${label} not specified"
   setVariable "${resultVariable}" "${1}"
   shift 1
   queryArguments=("${@}")
}

makeLocationPhrase() {
   local phraseVariable="${1}"
   local locationsArray="${2}"
   local index="${3:-0}"

   local result=""
   local field

   for field in name region country
   do
      local value
      getElement value "${locationsArray}" "${index},${field}"
      [ -n "${value}" ] || continue

      [  -n "${result}" ] && result+=", "
      result+="${value}"
   done

   setVariable "${phraseVariable}" "${result}"
}

declare -A myProperties=()
getMyProperties() {
   [ "${#myProperties[*]}" -eq 0 ] && ipGetProperties myProperties
}

getMyCoordinates() {
   local latitudeVariable="${1}"
   local longitudeVariable="${2}"

   getMyProperties
   setVariable "${latitudeVariable}" "${myProperties["location,latitude"]}"
   setVariable "${longitudeVariable}" "${myProperties["location,longitude"]}"
}

getLocationCoordinates() {
   local latitudeVariable="${1}"
   local longitudeVariable="${2}"
   local descriptor="${3}"

   local -A locations=()
   owmQueryLocation locations "${descriptor}"

   local count="${locations["count"]}"
   [ "${count}" -eq 0 ] && semanticError "location not found: ${descriptor}"
   local index

   if [ "${count}" -eq 1 ]
   then
      index=0
   elif [ -n "${locationNumber}" ]
   then
      index=$((locationNumber - 1))
      [ "${index}" -lt "${count}" ] || semanticError "not that many locations: ${locationNumber} > ${count}"
   else
      local locations=""
      index=0

      while [ "${index}" -lt "${count}" ]
      do
         local location
         makeLocationPhrase location locations "${index}"

         [ -n "${locations}" ] && locations+="; "
         locations+="${location}"

         let "index += 1"
      done

      semanticError "more than one location: ${locations}"
   fi

   local location
   makeLocationPhrase location locations "${index}"

   local coordinate="${locations["${index},latitude"]}"
   [ -n "${coordinate}" ] || semanticError "latitude not known: ${location}"
   setVariable "${latitudeVariable}" "${coordinate}"

   local coordinate="${locations["${index},longitude"]}"
   [ -n "${coordinate}" ] || semanticError "longitude not known: ${location}"
   setVariable "${longitudeVariable}" "${coordinate}"
}

getLatitudeArgument() {
   local resultVariable="${1}"

   local coordinate label="latitude"
   getQueryArgument coordinate "${label}"

   parseLatitude coordinate || {
      syntaxError "invalid ${label}: ${coordinate}"
   }

   setVariable "${resultVariable}" "${coordinate}"
}

getLongitudeArgument() {
   local resultVariable="${1}"

   local coordinate label="longitude"
   getQueryArgument coordinate "${label}"

   parseLongitude coordinate || {
      syntaxError "invalid ${label}: ${coordinate}"
   }

   setVariable "${resultVariable}" "${coordinate}"
}

getLocation() {
   local latitudeVariable="${1}"
   local longitudeVariable="${2}"

   if haveMoreQueryArguments
   then
      getLatitudeArgument "${latitudeVariable}"
      getLongitudeArgument "${longitudeVariable}"
   elif [ "${locationDescriptor}" = "=" ]
   then
      getMyCoordinates "${latitudeVariable}" "${longitudeVariable}"
   elif [ -n "${locationDescriptor}" ]
   then
      getLocationCoordinates "${latitudeVariable}" "${longitudeVariable}" "${locationDescriptor}"
   else
      getPersistentProgramSetting "${latitudeVariable}" "${latitudeSetting}"
      getPersistentProgramSetting "${longitudeVariable}" "${longitudeSetting}"

      if [ -n "${!latitudeVariable}" -a -n "${!longitudeVariable}" ]
      then
         saveLocation=false
      else
         getMyCoordinates "${latitudeVariable}" "${longitudeVariable}"
      fi
   fi

   "${saveLocation}" && {
      changePersistentProgramSetting "${latitudeSetting}" "${!latitudeVariable}"
      changePersistentProgramSetting "${longitudeSetting}" "${!longitudeVariable}"
      changePersistentProgramSetting "${locationDescriptorSetting}" "${locationDescriptor}"

      local phrase=""
      local -A locations=()

      owmQueryCoordinates locations "${latitude}" "${longitude}" && {
         local count
         getElement count locations "count"

         [ "${count}" -gt 0 ] && {
            makeLocationPhrase phrase locations 0
         }
      }

      changePersistentProgramSetting "${locationPhraseSetting}" "${phrase}"
   }
}

showLines() {
   local text="" line

   for line
   do
      text+="${line}"
      text+=$'\n'
   done

   echo -n "${text}"
}

showLocations() {
   local locationsArray="${1}"
   local descriptor="${2}"

   local count
   getElement count "${locationsArray}" "count"

   [ "${count}" -gt 0 ] || semanticError "location not found: ${descriptor}"
   local index=0

   while [ "${index}" -lt "${count}" ]
   do
      local location
      makeLocationPhrase location "${locationsArray}" "${index}"

      local latitude
      getElement latitude "${locationsArray}" "${index},latitude"

      local longitude
      getElement longitude "${locationsArray}" "${index},longitude"

      echo "${location}: ${latitude} ${longitude}"
      let "index += 1"
   done
}

performQuery_coordinates() {
   local latitude longitude
   getLocation latitude longitude
   noMoreQueryArguments

   local -A locations=()
   owmQueryCoordinates locations "${latitude}" "${longitude}"
   showLocations locations "[${latitude}, ${longitude}]"
}

performQuery_location() {
   [ -n "${locationDescriptor}" ] || getQueryArgument locationDescriptor "location"
   noMoreQueryArguments

   local -A locations=()
   owmQueryLocation locations "${locationDescriptor}"
   showLocations locations "${locationDescriptor}"
}

performQuery_forecast() {
   local latitude longitude
   getLocation latitude longitude
   noMoreQueryArguments

   local -A forecast=()
   owmQueryForecast forecast "${latitude}" "${longitude}"
}

showWeather() {
   local weatherArray="${1}"

   local lines=() line

   local time offset
   getElement time "${weatherArray}" "time"
   getElement offset "${weatherArray}" "time,offset"
   formatTime time
   printf -v line "as at %s" "${time}"
   lines+=("${line}")

   local name description general
   getElement name "${weatherArray}" "location,name"
   getElement description "${weatherArray}" "weather,description"
   getElement general "${weatherArray}" "weather,general"
   [ -n "${description}" ] || description="${general}"
   printf -v line "%s: %s" "${name}" "${description}"
   lines+=("${line}")

   local temperature feelsLike
   getElement temperature "${weatherArray}" "temperature"
   getElement feelsLike "${weatherArray}" "temperature,feels"
   formatTemperature temperature
   formatTemperature feelsLike
   line="temperature: ${temperature}"
   [ "${feelsLike}" = "${temperature}" ] || line+=" (feels like ${feelsLike})"
   lines+=("${line}")

   local windSpeed windDegrees windDirection
   getElement windSpeed "${weatherArray}" "wind,speed"
   getElement windDegrees "${weatherArray}" "wind,degrees"
   formatSpeed windSpeed
   toWindDirection windDirection "${windDegrees}"
   printf -v line "wind: %s from the %s (%d°)" "${windSpeed}" "${windDirection}" "${windDegrees}"
   lines+=("${line}")

   local humidity pressure
   getElement humidity "${weatherArray}" "humidity"
   getElement pressure "${weatherArray}" "pressure"
   formatPressure pressure
   printf -v line "%d%% humidity, pressure is %s" "${humidity}" "${pressure}"
   lines+=("${line}")

   local clouds visibility
   getElement clouds "${weatherArray}" "clouds,percent"
   getElement visibility "${weatherArray}" "visibility"
   line="${clouds}% clouds"

   [ "${visibility}" -lt 10000 ] && {
      formatDistance visibility
      line+=", visibility is ${visibility}"
   }

   lines+=("${line}")
   showLines "${lines[@]}"
}

performQuery_weather() {
   local latitude longitude
   getLocation latitude longitude
   noMoreQueryArguments

   local -A weather=()
   owmQueryWeather weather "${latitude}" "${longitude}"
   showWeather weather
}

addProgramParameter query queryType "the type of query to perform"
optionalProgramParameters "arg" "arguments for the query"

addProgramOption l string.location locationDescriptor "the descriptor for a location (see Location Descriptors)"
addProgramOption n string.number locationNumber "the number for when there's more than one"

addProgramOption L flag saveLocation "save the specified location"
addProgramOption U flag saveUnits "save the specified units"

addProgramOption f string.file configurationFile "the configuration file to use"
parseProgramArguments "${@}"

[ -n "${locationNumber}" ] && {
   verifyInteger "location number" "${locationNumber}" 1 99
}

restorePersistentProgramSettins "${configurationFile}"
[ -n "${unitsType}" ] && useUnits "${unitsType}"

verifyDistanceUnit
verifyPressureUnit
verifySpeedUnit
verifyTemperatureUnit
verifyTimeFormat
verifyChoice "query type" queryType location coordinates forecast weather

"${saveUnits}" && saveUnits
"performQuery_${queryType}"
savePersistentProgramSettins "${configurationFile}"
exit 0
