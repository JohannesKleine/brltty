#!/bin/bash
. /brltty/current/libexec/canute-prologue.sh
shopt -s extglob

addTestModeOption
addProgramOption A flag allActions "perform all of the actions - implies -P -p -e -k -l -u -s -b -r"
addProgramOption P flag unwantedPackages "remove the unwanted packages - implied by -A"
addProgramOption p flag requiredPackages "install the required packages - implied by -A"
addProgramOption e flag etcFiles "install the /etc/ files - implied by -A"
addProgramOption k flag apiKey "generate the BrlAPI access key - implied by -A"
addProgramOption l flag sharedLibraries "configure the shared libraries - implied by -A"
addProgramOption u flag udevReload "reload the Udev rules - implied by -A"
addProgramOption s flag systemdUnits "configure the Systemd units - implied by -A"
addProgramOption b flag bootTaret "set the boot target"
addProgramOption r flag rebootSystem "reboot the system - implied by -A"
parseProgramArguments "${@}"

actionFlags=(unwantedPackages requiredPackages etcFiles apiKey sharedLibraries udevReload systemdUnits bootTaret installComplete rebootSystem)
installComplete=false
verifyActionFlags allActions "${actionFlags[@]}"

processPackages() {
   local type="${1}"
   shift 1

   local packagesFile="${installTree}/etc/${type}-packages"
   verifyInputFile "${packagesFile}"

   local packages=()
   local name

   while read name
   do
      name="${name##*( )}"
      [ -n "${name}" ] || continue
      [ "${name:0:1}" != "#" ] || continue
      name="${name%%*( )}"

      logNote "${type} package: ${name}"
      packages+=("${name}")
   done <"${packagesFile}"

   [ "${#packages[*]}" -eq 0 ] || {
      executeHostCommand "${@}" "${packages[@]}"
   }
}

performAction_unwantedPackages() {
   logTask "removing the unwanted packages"
   processPackages unwanted apt --yes --quiet --quiet --quiet remove --
}

performAction_requiredPackages() {
   logTask "updating the package metadata"
   executeHostCommand apt --quiet --quiet --quiet -- update

   logTask "installing the required packages"
   processPackages required apt --yes --quiet --quiet --quiet install --
}

performAction_etcFiles() {
   logTask "installing the /etc/ files"
   executeHostCommand tar --extract --file "${installTree}/etc.tar" --directory "/"
}

performAction_apiKey() {
   logTask "generating the BrlAPI access key"

   local apiKeyFile="/etc/brlapi.key"
   executeHostCommand "${installTree}/bin/brltty-genkey" -q -f "${apiKeyFile}"
   executeHostCommand chmod u=rw,go=r "${apiKeyFile}"
}

performAction_sharedLibraries() {
   logTask "configuring the shared libraries"
   local file lines=""

   while read file
   do
      [ -z "${lines}" ] || lines+=$'\n'
      lines+="${file}"
   done < <(find "${installTree}/" -type f \( -name "*.so" -o -name "*.so.*" \))

   sed <<<"${lines}" --regexp-extended --expression '
      s%/[^/]*$%%
      /\/brltty$/d
   ' | sort | uniq >"${ldConfigurationFile}"

   executeHostCommand ldconfig
}

performAction_udevReload() {
   logTask "reloading the Udev rules"
   executeHostCommand udevadm control --reload
}

performAction_systemdUnits() {
   logTask "reloading the Systemd units"
   executeHostCommand systemctl --quiet daemon-reload

   logTask "configuring the Systemd units"
   local unit

   for unit in "${canuteSystemdUnit}"
   do
      ! systemctl --quiet is-active "${unit}" || executeHostCommand systemctl --quiet stop "${unit}"
      executeHostCommand systemctl --quiet start "${unit}"
      systemctl --quiet is-enabled "${unit}" || executeHostCommand systemctl --quiet enable "${unit}"
   done
}

performAction_bootTaret() {
   logTask "setting the boot target"
   executeHostCommand systemctl --quiet set-default multi-user.target
}

performAction_installComplete() {
   sync
   programMessage "install complete"
}

performAction_rebootSystem() {
   if confirmAction "reboot the system"
   then
      reboot
   else
      programMessage "system not rebooted"
   fi
}

"${testMode}" || [ "$(id -u)" -eq 0 ] || semanticError "not executing as root"
set -e

for action in "${actionFlags[@]}"
do
   ! "${!action}" || {
      "performAction_${action}"
   }
done

exit 0
