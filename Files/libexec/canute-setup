#!/bin/bash
. /brltty/current/libexec/prologue.sh
shopt -s extglob

addTestModeOption
addProgramOption A flag allActions "perform all of the actions"
addProgramOption p flag requiredPackages "install the required host packages"
addProgramOption e flag etcFiles "install the /etc/ files"
addProgramOption k flag apiKey "generate the BrlAPI access key"
addProgramOption l flag sharedLibraries "configure the shared libraries"
addProgramOption u flag udevReload "reload the Udev rules"
addProgramOption s flag systemdUnits "configure the Systemd units"
parseProgramArguments "${@}"

actionFlags=(requiredPackages etcFiles apiKey sharedLibraries udevReload systemdUnits)
verifyActionFlags allActions "${actionFlags[@]}"

performAction_requiredPackages() {
   local packagesFile="${installTree}/etc/required-packages"
   verifyInputFile "${packagesFile}"

   local packages=()
   local line

   while read line
   do
      line="${line##*( )}"
      [ -n "${line}" ] || continue
      [ "${line:0:1}" != "#" ] || continue
      line="${line%%*( )}"

      logNote "required package: ${line}"
      packages+=("${line}")
   done <"${packagesFile}"

   [ "${#packages[*]}" -eq 0 ] || {
      executeHostCommand apt --yes --quiet --quiet --quiet install -- "${packages[@]}"
   }
}

performAction_etcFiles() {
   executeHostCommand tar --extract --file "${installTree}/etc.tar" --directory "/"
}

performAction_apiKey() {
   local apiKeyFile="/etc/brlapi.key"
   executeHostCommand "${installTree}/bin/brltty-genkey" -q -f "${apiKeyFile}"
   executeHostCommand chmod u=rw,go=r "${apiKeyFile}"
}

performAction_sharedLibraries() {
   local file lines=""

   while read file
   do
      [ -z "${lines}" ] || lines+=$'\n'
      lines+="${file}"
   done < <(find "${installTree}/" -type f \( -name "*.so" -o -name "*.so.*" \))

   sed <<<"${lines}" --regexp-extended --expression '
      s%/[^/]*$%%
      /\/brltty$/d
   ' | sort | uniq >"${ldConfigurationFile}"

   executeHostCommand ldconfig
}

performAction_udevReload() {
   executeHostCommand udevadm control --reload
}

performAction_systemdUnits() {
   executeHostCommand systemctl --quiet daemon-reload
   local unit

   for unit in "brltty@canute.path"
   do
      executeHostCommand systemctl --quiet enable "${unit}"
      executeHostCommand systemctl --quiet start "${unit}"
   done
}

"${testMode}" || [ "$(id -u)" -eq 0 ] || semanticError "not executing as root"
set -e

for action in "${actionFlags[@]}"
do
   ! "${!action}" || {
      "performAction_${action}"
   }
done

exit 0
